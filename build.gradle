buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'net.saliman:gradle-cobertura-plugin:2.0.0' // cobertura plugin
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
        classpath 'org.ajoberstar:gradle-git:0.10.1'
    }
}

plugins {
  id 'com.matthewprenger.cursegradle' version '1.0.1'
  id 'net.saliman.cobertura' version '2.2.5'
  id 'com.github.kt3k.coveralls' version '2.0.1'
}

apply from: 'https://raw.githubusercontent.com/BuiltBrokenModding/BuiltBrokenScripts/buildScripts/index.gradle'
apply plugin: 'forge'
apply plugin: 'curseforge'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'
apply from: 'https://raw.githubusercontent.com/BuiltBrokenModding/BuiltBrokenScripts/buildScripts/scripts/forge/deps.gradle'

// This is used to set the local version
if (project.hasProperty("bambooBuildNumber"))
    version += project.bambooBuildNumber
else
    version += getDate()
    
println "version = "+ version

println "Current Minecraft version = " + minecraft.apiVersion

def currentJvm = org.gradle.internal.jvm.Jvm.current()
println "Current Java version = " + currentJvm

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		//include '**/*.lang'
		include '**/*.info'
		include '**/*.properties'

		expand 'version': project.version, 'mcversion': project.minecraft.version
		// replace version and MCVersion
	}
    

	// copy everything else, thats not text
	from(sourceSets.main.resources.srcDirs) {
		exclude '**/*.info'
		exclude '**/*.properties'
	}
}

//curse {
//    apiKey = project.dmodcurse
//    projectId = "225502"
//    // my project url is http://minecraft.curseforge.com/mc-mods/225502-icbm
//    changelog = ""
//    releaseType = "alpha"
//    relatedProject 'voltz-engine': 'requiredLibrary'
//
//    // the default obfuscated jar is uploaded by default
//    // artifact = project.file("some/jar/to/upload.jar")
//
//    // allows you to add extra compatible MC versions. The one specified in the minecraft{} block is used by default.
//    addGameVersion "1.7.10"
//    // addGameversion "1.7.0", "1.7.4"
//}

def gitHash = 'unknown'
if (new File(projectDir, '.git').exists()) {
    def repo = Grgit.open(project.file('.'))
    gitHash = repo.log().find().abbreviatedId
}

jar {
    manifest.mainAttributes(
            "Built-By": System.getProperty('user.name'),
            "Created-By": currentJvm,
            "Implementation-Title": archivesBaseName,
            "Implementation-Version": project.version,
            "Git-Hash": gitHash,
    )
}

dependencies 
{
    if (project.getProperty("bambooshortPlanName") == "BBM-Dev"){
    compile "dev.builtbroken.voltzengine:VoltzEngine:1.7.10-0.+:deobf-dev"
    }
    else
    {
    compile "com.builtbroken.voltzengine:VoltzEngine:1.7.10-0.+:deobf"}
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}
